from random import choice, randint
from aiogram import types


total = 150         # –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
step = 1            # –Ω–æ–º–µ—Ä —Ö–æ–¥–∞
taken = ''          # –≤–∑—è—Ç–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º —Ö–æ–¥–µ


async def new_game( message: types.Message ) -> int:
    global total, turn, step
    user = message.from_user.full_name
    turn = randint(0, 2)           # –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å. 1 - user, 0 - –ë–æ—Ç

    await message.answer( f'{ user }, –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å...' \
                          f'–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ  /stop' )
    if turn == 1:
        await message.answer( f'{ user }, –≤–∞—à —Ö–æ–¥. '
                              f'–ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç { total } –∫–æ–Ω—Ñ–µ—Ç\n' \
                              'C–∫–æ–ª—å–∫–æ —Ç—ã –≤–æ–∑—å–º–µ—à—å? ' )
    else:
        await bot( message )


async def player( message: types.Message ):
    global taken, total
    user = message.from_user.full_name
    while True:
        taken = message.text
        if taken.isdigit():
            taken = int( taken )
            if taken > total:
                await message.answer( f'–í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å { taken } –∫–æ–Ω—Ñ–µ—Ç, '
                                      f'–Ω–æ –Ω–∞ —Å—Ç–æ–ª–µ –≤—Å–µ–≥–æ { total } –∫–æ–Ω—Ñ–µ—Ç.\n '
                                      f'–í–æ–∑—å–º–∏ –Ω–µ –±–æ–ª—å—à–µ 28 –∫–æ–Ω—Ñ–µ—Ç, –Ω–µ –∂–∞–¥–Ω–∏—á–∞–π üòÉ' )
                return True
            elif taken < 1 or taken > 28:
                if total > 28: 
                    await message.answer( '–í—ã –¥–æ–ª–∂–Ω—ã –≤–∑—è—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 –∏ –Ω–µ –±–æ–ª–µ–µ 28 –∫–æ–Ω—Ñ–µ—Ç...' )
                else:
                    await message.answer( '–ù–∞–¥–æ –±—ã –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 28. ' )
                return True    
            else:
                break

    if await check_win(message, "player", taken):
        return False

    await message.answer( f'–í—ã –±–µ—Ä–µ—Ç–µ { taken } –∫–æ–Ω—Ñ–µ—Ç.\n ' \
                          f'–ù–∞ —Å—Ç–æ–ª–µ –æ—Å—Ç–∞–ª–æ—Å—å { total } –∫–æ–Ω—Ñ–µ—Ç.' )

    if not await bot( message ):
        return False
    return True


async def bot( message: types.Message ):
    global taken, step, total
    user = message.from_user.full_name   
    bot_took = 0
    if step == 1:
        if total > 29:
            if  total - total//29 * 29 == 0:
                bot_took = total - total//29 * 29 + 1
                taken = bot_took
                step += 1
            else:                
                bot_took = total - total//29 * 29
                taken = bot_took
                step += 1
        else:
            bot_took = 29 - taken
            taken = bot_took
            step += 1
    else:
        bot_took = 29 - taken
        taken = bot_took
        step += 1
    if await check_win( message, "–ë–æ—Ç", taken ):
        return False

    await message.answer( f'–•–æ–¥ –ë–æ—Ç–∞. –û–Ω –∑–∞–±–∏—Ä–∞–µ—Ç { bot_took } üç¨.\n' \
                        f'–ù–∞ —Å—Ç–æ–ª–µ –æ—Å—Ç–∞–ª–æ—Å—å { total } –∫–æ–Ω—Ñ–µ—Ç')
    await message.answer( f'{ user }, —Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç –≤–æ–∑—å–º–µ—Ç–µ –≤—ã?' )
    return True


async def check_win( message: types.Message, player: str, taken: int ) -> bool:
    global total
    user = message.from_user.full_name
    total -= taken

    if total == 0: 
        if player == "player":
            await message.answer( f"–í—ã –±–µ—Ä–µ—Ç–µ { taken } –∫–æ–Ω—Ñ–µ—Ç\n" 
                                  f"\n–ö–æ–Ω—Ñ–µ—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç! "
                                  f"\n{ user }, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏...ü§ì "
                                  f"\n\n–ï—â–µ —Ä–∞–∑–æ–∫? –í–≤–µ–¥–∏ /stop, –ø–æ—Ç–æ–º /game")
        else:
            await message.answer( f'–ë–æ—Ç –∑–∞–±—Ä–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ—Ñ–µ—Ç—ã. '
                                  f'–ê –∑–Ω–∞—á–∏—Ç –∏ –≤–∞—à–∏ —Ç–æ–∂–µ! –í—ã–∏–≥—Ä–∞–ª –±–æ—Ç! üòé\n '
                                  f'–ö–∞–∫ –Ω–∞—Å—á–µ—Ç —Ä–µ–≤–∞–Ω—à–∞?:) –í–≤–µ–¥–∏ /stop, –ø–æ—Ç–æ–º /game. ')

        return True
    else:
        return False


